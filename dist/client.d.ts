import Emittery from 'emittery';
import { Subscription } from './models/subscription.model.js';
export declare class Client {
    private readonly emitter;
    private readonly globalEmitSubscription;
    private readonly queueProcessor;
    private readonly rootApi;
    private readonly publicBulletEndPoint;
    private readonly lengthConnectId;
    private readonly retryTimeoutMs;
    private readonly retrySubscription;
    private readonly triggerTickerDisconnected;
    private readonly triggerNbCandle;
    private readonly emitChannel;
    private ws;
    private socketOpen;
    private socketConnecting;
    private askingClose;
    private connectId;
    private pingIntervalMs;
    private pingTimer;
    private wsPath;
    private publicToken;
    private subscriptions;
    private eventHandler;
    private disconnectedTrigger;
    private lastPongReceived;
    constructor(emitter: Emittery, globalEmitSubscription: () => void);
    connect(): Promise<void>;
    getPublicToken(): string;
    subscribeTicker(symbol: string): void;
    unsubscribeTicker(symbol: string): void;
    subscribeCandle(symbol: string, interval: string): void;
    unsubscribeCandle(symbol: string, interval: string): void;
    closeConnection(): void;
    forceCloseConnection(): void;
    isSocketOpen(): boolean;
    isSocketConnecting(): boolean;
    getSubscriptionNumber(): number;
    getSubscriptions(): Subscription[];
    receivedPongRecently(): boolean;
    shouldReconnectDeadSockets(): void;
    hasTickerSubscription(symbol: string): boolean;
    hasCandleSubscription(symbol: string, interval: string): boolean;
    private shouldReconnectTickers;
    private shouldReconnectCandles;
    private addTickerSubscription;
    private removeTickerSubscription;
    private addCandleSubscription;
    private removeCandleSubscription;
    private send;
    private restartPreviousSubscriptions;
    private requireSocketToBeOpen;
    private sendPing;
    private startPing;
    private stopPing;
    private reconnect;
    private openWebsocketConnection;
    private waitOpenSocket;
}
